# -*- coding: utf-8 -*-
"""Heirarchical clusturing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MK6gFnYZu2y-1_YfIXgpNfjdASMkvE-K
"""

from scipy.cluster.hierarchy import dendrogram, linkage, fcluster
import numpy as np
from sklearn.metrics.pairwise import euclidean_distances
from collections import Counter
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt

def plot_hist(labels):
  label=[]
  for i in range (0,len(labels)):
    if labels[i]!="Noise":
      label.append(labels[i])
  plt.hist(label)

def purity(true_labels,cluster_labels):
  true =[]
  cluster = []
  for i in range(0,len(cluster_labels)):
    if cluster_labels[i]!="Noise":
      true.append(true_labels[i])
      cluster.append(cluster_labels[i])
  ConfusionMatrix = confusion_matrix(true,cluster)
  sum = 0 
  for i in range (0,ConfusionMatrix.shape[0]):
    sum +=ConfusionMatrix[i,np.argmax(ConfusionMatrix[i,])]
  return(sum/len(true_labels))

from keras.datasets import mnist
# load dataset
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()
# summarize dataset shape
print('Train', train_images.shape, train_labels.shape)
print('Test', (test_images.shape, test_labels.shape))
# summarize pixel values
print('Train', train_images.min(), train_images.max(), train_images.mean(), train_images.std())
print('Test', test_images.min(), test_images.max(), test_images.mean(), test_images.std())

# train_vector = .reshape(train_images, (60000, 28 * 28))
test_vector = test_images.flatten().reshape(10000, 28 * 28)
# train_matrix = (train_vector - train_vector.mean()/train_images.std())
test_matrix = (test_vector - test_vector.mean())/train_images.std()

Y=euclidean_distances(test_vector)
 Z =linkage(Y,"ward")
 #dendrogram(Z)

clusterLabels = fcluster(Z,t=1.1547,criterion = "inconsistent")
# cluster_lab=[]
# for i in Counter(clusterLabels).values():
#   cluster_lab.append(i)
# # print(cluster_lab)

print(Counter(clusterLabels))

# clusterLabels = fcluster(Z,t=1,criterion = "inconsistent")

purity(test_labels,clusterLabels)

plt.hist(clusterLabels)