# -*- coding: utf-8 -*-
"""Household DataQ7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CWnFC7U8mdavlgVNuTMu-yqe4Aqo7fNJ
"""

from sklearn.preprocessing import normalize
from sklearn.metrics import silhouette_score
from sklearn.metrics.pairwise import cosine_similarity, euclidean_distances

import numpy as np

def finding_neighbors(data,item_index,eps):
  neighbor_index = set()
  for index in range(data.shape[0]):
    if np.linalg.norm(data[item_index]-data[index])<eps:
      neighbor_index.add(index)
  return neighbor_index

def main_dbscan(data, eps, min_pts):
  label = [0]*data.shape[0]
  cluster_no = 0
  visited_index = []
  noise_temp = []
  for index in range(data.shape[0]):
    if index not in visited_index:
      visited_index.append(index)
      neighbor_index = finding_neighbors(data, index, eps)
      if len(neighbor_index)<min_pts:
        noise_temp.append(index)
      else:
        cluster_no +=1
        label[index] = cluster_no
        for item_index in neighbor_index.copy():
          if item_index in noise_temp:
            label[item_index] = cluster_no
          elif item_index not in visited_index:
            visited_index.append(item_index)
            neighbor_index_add = finding_neighbors(data, index, eps)
            label[item_index]= cluster_no
            if len(neighbor_index_add)>=min_pts:
              neighbor_index.update(neighbor_index_add)
  return label, cluster_no +1



from google.colab import files
uploaded = files.upload()

train_data = np.loadtxt("housing_train.txt")

ec_score=euclidean_distances(train_data)
print(np.mean(ec_score))

label,cluster_no = main_dbscan(train_data ,eps=200,min_pts=70)
print(cluster_no)

from collections import Counter
print(Counter(label))

score = silhouette_score(train_data,label)
print(score)

data = normalize(train_data)
ec_score=euclidean_distances(data)
print(np.mean(ec_score))
label,cluster_no = main_dbscan(data ,eps=0.3,min_pts=50)
print(cluster_no)
print(Counter(label))

score = silhouette_score(data,label)
print(score)