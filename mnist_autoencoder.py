# -*- coding: utf-8 -*-
"""mnistQ3HW4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yumAUCENsWgsZeM_W1v7djwiAlWfucW6
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import tensorflow as tf

from sklearn.metrics import accuracy_score, precision_score, recall_score
from sklearn.model_selection import train_test_split
from tensorflow.keras.datasets import fashion_mnist,mnist
from tensorflow.keras import layers, losses
from tensorflow.keras.models import Model

(x_train, y_train),(x_test, y_test) = mnist.load_data()

x_train = x_train.astype('float32')/255
x_test = x_test.astype('float32')/255
test_data = np.reshape(x_test, (10000, 28 * 28))
train_data = np.reshape(x_train, (60000, 28 * 28))
print(x_train.shape)
print(x_test.shape)

latent_dim = 64

class Autoencoder(Model):
  def __init__(self, latent_dim):
    super(Autoencoder,self).__init__()
    self.latent_dim=latent_dim
    self.encoder = tf.keras.Sequential([
      layers.Flatten(),
      layers.Dense(latent_dim,activation='relu'),
    ])
    self.decoder=tf.keras.Sequential([
      layers.Dense(784, activation='sigmoid'),
      layers.Reshape((28,28))
    ])
  def call(self,x):
    encoded = self.encoder(x)
    decoded = self.decoder(encoded)
    return decoded

autoencoder = Autoencoder(latent_dim)
autoencoder.compile(optimizer='adam',loss=losses.MeanSquaredError())
autoencoder.fit(x_train,x_train,
                epochs=5,
                shuffle=True,
                # steps_per_epoch=500,
                validation_data=(x_test,x_test),
                validation_steps=2

                )
encoded_train = autoencoder.encoder(x_train).numpy()
encoded_imgs = autoencoder.encoder(x_test).numpy()
decoded_imgs = autoencoder.decoder(encoded_imgs).numpy()

n=10
plt.figure(figsize=(20,4))
for i in range(n):
  ax=plt.subplot(2,n,i+1)
  plt.imshow(x_test[i])
  plt.title("orignal")
  plt.gray()
  ax.get_xaxis().set_visible(False)
  ax.get_yaxis().set_visible(False)

  ax=plt.subplot(2,n,i+1+n)
  plt.imshow(decoded_imgs[i])
  plt.title("reconstructed")
  plt.gray()
  ax.get_xaxis().set_visible(False)
  ax.get_yaxis().set_visible(False)

from sklearn.metrics import pairwise#_distances
#dist_out = 1-pairwise_distances(vector2,vector1, metric="cosine")
similarity_matrix1= pairwise.cosine_similarity(encoded_train, encoded_imgs)
similarity_matrix2= pairwise.cosine_similarity(train_data, test_data)

print(similarity_matrix1[10])
print(similarity_matrix2[10])

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=5).fit(encoded_train, y_train)
knn.score(encoded_imgs,y_test)