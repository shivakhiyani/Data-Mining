# -*- coding: utf-8 -*-
"""6.3graph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RyuxB3XSWKA5lcGfRmj6vVdOiOLzD6_9
"""

import networkx as nx
import math
import csv
from igraph import*

from functools import wraps
from itertools import product

import networkx as nx
from networkx import NetworkXError
from networkx.utils import not_implemented_for
from networkx.algorithms.community.community_utils import is_partition
import networkx.algorithms.community as nx_comm

file= csv.reader(open("/content/edges_sampled_map_3K.csv"),delimiter=",")
G=nx.Graph()
for line in file:
  G.add_edge(int(line[0]),int(line[1]),weight=1.0)
  print(G.nodes())

nx.draw(G)

def UpdateDeg(A,nodes):
  deg_dict={}
  n=len(nodes)
  B = A.sum(axis=1)
  for i in range(n):
    deg_dict[i]=B[i,0]
  return deg_dict
A=nx.adj_matrix(G)
Orig_deg={}
Orig_deg=UpdateDeg(A,G.nodes())
print(Orig_deg)

def edge_to_remove(g):
      
    d1 = nx.edge_betweenness_centrality(g,weight=0)
    list_of_tuples = list(d1.items())
      
    sorted(list_of_tuples, key = lambda x:x[1], reverse = True)
      
    # Will return in the form (a,b)
    return list_of_tuples[0][0]

def girvan(g):
    a = nx.number_connected_components(g)
    b=a
    print (' The number of connected components are ', a)
    while (b <= a):
  
        # We need (a,b) instead of ((a,b))
        u, v = edge_to_remove(g)
        g.remove_edge(u, v) 
          
        a = nx.number_connected_components(g)
        b=nx_comm.modularity(g, nx_comm.label_propagation_communities(g))
        # lena=len(list(a))
        print (' The number of connected components are ', a,b)
    
    return b
girvan(G)

def modularity(G,deg):
  a=nx.adj_matrix(G)
  new_deg={}
  new_deg=UpdateDeg(a,G.nodes())
  components=nx.connected_components(G)
  mod=0
  for c in components:
    e_i=0
    a_i=0
    for u in c:
      e_i+=new_deg[u]
      a_i+=deg[u]

a=nx.adj_matrix(G)
components=nx.connected_components(G)
Graph.modularity(G,components)